
SPI_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800393c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800393c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb76  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0002fbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00031770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00032520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf8b  00000000  00000000  00033228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103af  00000000  00000000  0004f1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7c37  00000000  00000000  0005f562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  001071ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038d8 	.word	0x080038d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038d8 	.word	0x080038d8

080001c8 <setCSLine>:
#define RES12           12
#define RES14           14


void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
 80001d4:	4613      	mov	r3, r2
 80001d6:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80001d8:	787a      	ldrb	r2, [r7, #1]
 80001da:	887b      	ldrh	r3, [r7, #2]
 80001dc:	4619      	mov	r1, r3
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 fe90 	bl	8000f04 <HAL_GPIO_WritePin>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	607a      	str	r2, [r7, #4]
 80001f6:	461a      	mov	r2, r3
 80001f8:	460b      	mov	r3, r1
 80001fa:	72fb      	strb	r3, [r7, #11]
 80001fc:	4613      	mov	r3, r2
 80001fe:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8000200:	893b      	ldrh	r3, [r7, #8]
 8000202:	2200      	movs	r2, #0
 8000204:	4619      	mov	r1, r3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f7ff ffde 	bl	80001c8 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
  delay(timer, 3);
 800020c:	2103      	movs	r1, #3
 800020e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000210:	f000 f8ab 	bl	800036a <delay>
  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8000214:	f107 0217 	add.w	r2, r7, #23
 8000218:	f107 010b 	add.w	r1, r7, #11
 800021c:	230a      	movs	r3, #10
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2301      	movs	r3, #1
 8000222:	68f8      	ldr	r0, [r7, #12]
 8000224:	f002 f9a5 	bl	8002572 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  delay(timer, 3);
 8000228:	2103      	movs	r1, #3
 800022a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800022c:	f000 f89d 	bl	800036a <delay>
  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8000230:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000234:	893b      	ldrh	r3, [r7, #8]
 8000236:	4619      	mov	r1, r3
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f7ff ffc5 	bl	80001c8 <setCSLine>

  return data;
 800023e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3718      	adds	r7, #24
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08c      	sub	sp, #48	; 0x30
 800024c:	af02      	add	r7, sp, #8
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	4611      	mov	r1, r2
 8000254:	461a      	mov	r2, r3
 8000256:	460b      	mov	r3, r1
 8000258:	80fb      	strh	r3, [r7, #6]
 800025a:	4613      	mov	r3, r2
 800025c:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 800025e:	88fa      	ldrh	r2, [r7, #6]
 8000260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2300      	movs	r3, #0
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4613      	mov	r3, r2
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	2100      	movs	r1, #0
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f7ff ffbc 	bl	80001ec <spiWriteRead>
 8000274:	4603      	mov	r3, r0
 8000276:	b29b      	uxth	r3, r3
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
  delay(timer, 3);
 800027c:	2103      	movs	r1, #3
 800027e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000280:	f000 f873 	bl	800036a <delay>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8000284:	88fa      	ldrh	r2, [r7, #6]
 8000286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	2301      	movs	r3, #1
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	4613      	mov	r3, r2
 8000290:	68ba      	ldr	r2, [r7, #8]
 8000292:	2100      	movs	r1, #0
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ffa9 	bl	80001ec <spiWriteRead>
 800029a:	4603      	mov	r3, r0
 800029c:	b29a      	uxth	r2, r3
 800029e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002a0:	4313      	orrs	r3, r2
 80002a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
 80002a8:	e010      	b.n	80002cc <getPositionSPI+0x84>
 80002aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80002ac:	6a3b      	ldr	r3, [r7, #32]
 80002ae:	fa42 f303 	asr.w	r3, r2, r3
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	b2d9      	uxtb	r1, r3
 80002ba:	f107 0210 	add.w	r2, r7, #16
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	4413      	add	r3, r2
 80002c2:	460a      	mov	r2, r1
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	3301      	adds	r3, #1
 80002ca:	623b      	str	r3, [r7, #32]
 80002cc:	6a3b      	ldr	r3, [r7, #32]
 80002ce:	2b0f      	cmp	r3, #15
 80002d0:	ddeb      	ble.n	80002aa <getPositionSPI+0x62>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
  if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80002d2:	7ffb      	ldrb	r3, [r7, #31]
 80002d4:	4619      	mov	r1, r3
 80002d6:	7f7a      	ldrb	r2, [r7, #29]
 80002d8:	7efb      	ldrb	r3, [r7, #27]
 80002da:	4053      	eors	r3, r2
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	7e7b      	ldrb	r3, [r7, #25]
 80002e0:	4053      	eors	r3, r2
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	4053      	eors	r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	7d7b      	ldrb	r3, [r7, #21]
 80002ec:	4053      	eors	r3, r2
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	7cfb      	ldrb	r3, [r7, #19]
 80002f2:	4053      	eors	r3, r2
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	7c7b      	ldrb	r3, [r7, #17]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	bf0c      	ite	eq
 80002fc:	2301      	moveq	r3, #1
 80002fe:	2300      	movne	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4299      	cmp	r1, r3
 8000304:	d11e      	bne.n	8000344 <getPositionSPI+0xfc>
          && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8000306:	7fbb      	ldrb	r3, [r7, #30]
 8000308:	4619      	mov	r1, r3
 800030a:	7f3a      	ldrb	r2, [r7, #28]
 800030c:	7ebb      	ldrb	r3, [r7, #26]
 800030e:	4053      	eors	r3, r2
 8000310:	b2da      	uxtb	r2, r3
 8000312:	7e3b      	ldrb	r3, [r7, #24]
 8000314:	4053      	eors	r3, r2
 8000316:	b2da      	uxtb	r2, r3
 8000318:	7dbb      	ldrb	r3, [r7, #22]
 800031a:	4053      	eors	r3, r2
 800031c:	b2da      	uxtb	r2, r3
 800031e:	7d3b      	ldrb	r3, [r7, #20]
 8000320:	4053      	eors	r3, r2
 8000322:	b2da      	uxtb	r2, r3
 8000324:	7cbb      	ldrb	r3, [r7, #18]
 8000326:	4053      	eors	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	7c3b      	ldrb	r3, [r7, #16]
 800032c:	429a      	cmp	r2, r3
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4299      	cmp	r1, r3
 8000338:	d104      	bne.n	8000344 <getPositionSPI+0xfc>
    {
      //we got back a good position, so just mask away the checkbits
      currentPosition &= 0x3FFF;
 800033a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800033c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000340:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000342:	e002      	b.n	800034a <getPositionSPI+0x102>
    }
  else
  {
    currentPosition = 0xFFFF; //bad position
 8000344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000348:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 800034a:	797b      	ldrb	r3, [r7, #5]
 800034c:	2b0c      	cmp	r3, #12
 800034e:	d107      	bne.n	8000360 <getPositionSPI+0x118>
 8000350:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000356:	4293      	cmp	r3, r2
 8000358:	d002      	beq.n	8000360 <getPositionSPI+0x118>
 800035a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800035c:	089b      	lsrs	r3, r3, #2
 800035e:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8000360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8000362:	4618      	mov	r0, r3
 8000364:	3728      	adds	r7, #40	; 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <delay>:
  spiWriteRead(&hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);

  delay(timer, 250);
}

void delay(TIM_HandleTypeDef *timer, uint32_t delayTime){
 800036a:	b480      	push	{r7}
 800036c:	b085      	sub	sp, #20
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
	uint32_t startTime = __HAL_TIM_GET_COUNTER(timer); 	//reference point to count passed time
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037a:	60bb      	str	r3, [r7, #8]
	uint32_t passedTime  = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]

	while (passedTime<delayTime){
 8000380:	e005      	b.n	800038e <delay+0x24>
		passedTime = __HAL_TIM_GET_COUNTER(timer) - startTime;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	60fb      	str	r3, [r7, #12]
	while (passedTime<delayTime){
 800038e:	68fa      	ldr	r2, [r7, #12]
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3f5      	bcc.n	8000382 <delay+0x18>
		if (passedTime<0){
			passedTime +=timer->Init.Period;
		}
	}
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fac9 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f82f 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 f92b 	bl	800060c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b6:	f000 f8f9 	bl	80005ac <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80003ba:	f000 f86b 	bl	8000494 <MX_SPI2_Init>
  MX_TIM2_Init();
 80003be:	f000 f8a7 	bl	8000510 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80003c2:	480e      	ldr	r0, [pc, #56]	; (80003fc <main+0x58>)
 80003c4:	f002 fca4 	bl	8002d10 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <main+0x5c>)
 80003ce:	f000 fd99 	bl	8000f04 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  abs_pos=getPositionSPI(&hspi2,GPIOB,GPIO_PIN_6,RES12,&htim2);
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <main+0x58>)
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	230c      	movs	r3, #12
 80003d8:	2240      	movs	r2, #64	; 0x40
 80003da:	4909      	ldr	r1, [pc, #36]	; (8000400 <main+0x5c>)
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <main+0x60>)
 80003de:	f7ff ff33 	bl	8000248 <getPositionSPI>
 80003e2:	4603      	mov	r3, r0
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <main+0x64>)
 80003e8:	801a      	strh	r2, [r3, #0]
	  cnt++;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <main+0x68>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <main+0x68>)
 80003f2:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fb09 	bl	8000a0c <HAL_Delay>
  {
 80003fa:	e7ea      	b.n	80003d2 <main+0x2e>
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	48000400 	.word	0x48000400
 8000404:	20000028 	.word	0x20000028
 8000408:	2000015c 	.word	0x2000015c
 800040c:	20000160 	.word	0x20000160

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b090      	sub	sp, #64	; 0x40
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	2228      	movs	r2, #40	; 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 fa52 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000432:	2302      	movs	r3, #2
 8000434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043a:	2310      	movs	r3, #16
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2302      	movs	r3, #2
 8000440:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000446:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800044a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fd6f 	bl	8000f34 <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800045c:	f000 f93c 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	230f      	movs	r3, #15
 8000462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000464:	2302      	movs	r3, #2
 8000466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2102      	movs	r1, #2
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fd98 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000486:	f000 f927 	bl	80006d8 <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3740      	adds	r7, #64	; 0x40
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_SPI2_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <MX_SPI2_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_SPI2_Init+0x74>)
 80004a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_SPI2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_SPI2_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_SPI2_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_SPI2_Init+0x74>)
 80004c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ca:	2218      	movs	r2, #24
 80004cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_SPI2_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_SPI2_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_SPI2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_SPI2_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_SPI2_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_SPI2_Init+0x74>)
 80004f4:	f001 ff92 	bl	800241c <HAL_SPI_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f8eb 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028
 800050c:	40003800 	.word	0x40003800

08000510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000538:	223f      	movs	r2, #63	; 0x3f
 800053a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM2_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_TIM2_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000558:	f002 fb82 	bl	8002c60 <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000562:	f000 f8b9 	bl	80006d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000574:	f002 fc18 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800057e:	f000 f8ab 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000590:	f002 fddc 	bl	800314c <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800059a:	f000 f89d 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b2:	4a15      	ldr	r2, [pc, #84]	; (8000608 <MX_USART2_UART_Init+0x5c>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005f0:	f002 fe12 	bl	8003218 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 f86d 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000d8 	.word	0x200000d8
 8000608:	40004400 	.word	0x40004400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a29      	ldr	r2, [pc, #164]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_GPIO_Init+0xc0>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_GPIO_Init+0xc0>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_GPIO_Init+0xc0>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	4812      	ldr	r0, [pc, #72]	; (80006d0 <MX_GPIO_Init+0xc4>)
 8000688:	f000 fc3c 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000692:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_GPIO_Init+0xc8>)
 80006a4:	f000 fabc 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0xc4>)
 80006c0:	f000 faae 	bl	8000c20 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400
 80006d4:	48000800 	.word	0x48000800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800071a:	2007      	movs	r0, #7
 800071c:	f000 fa4c 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_SPI_MspInit+0x7c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d128      	bne.n	80007a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_SPI_MspInit+0x80>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_SPI_MspInit+0x80>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000790:	2305      	movs	r3, #5
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_SPI_MspInit+0x84>)
 800079c:	f000 fa40 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40003800 	.word	0x40003800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d10b      	bne.n	80007de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_TIM_Base_MspInit+0x38>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_TIM_Base_MspInit+0x38>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_TIM_Base_MspInit+0x38>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_UART_MspInit+0x7c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d128      	bne.n	8000864 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_UART_MspInit+0x80>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <HAL_UART_MspInit+0x80>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_UART_MspInit+0x80>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_UART_MspInit+0x80>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <HAL_UART_MspInit+0x80>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_UART_MspInit+0x80>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000842:	230c      	movs	r3, #12
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000852:	2307      	movs	r3, #7
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 f9de 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f884 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f7ff ffd7 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 ffb1 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fd41 	bl	80003a4 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	20000168 	.word	0x20000168

0800093c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f931 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fec2 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f93b 	bl	8000c06 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f911 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000164 	.word	0x20000164

080009f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000164 	.word	0x20000164

08000a0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffde 	bl	80009f4 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff8e 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff47 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff5c 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff8e 	bl	8000b0c <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffb0 	bl	8000b74 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e14e      	b.n	8000ece <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 8140 	beq.w	8000ec8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d005      	beq.n	8000c60 <HAL_GPIO_Init+0x40>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d130      	bne.n	8000cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c96:	2201      	movs	r2, #1
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	f003 0201 	and.w	r2, r3, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d017      	beq.n	8000cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d123      	bne.n	8000d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	6939      	ldr	r1, [r7, #16]
 8000d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0203 	and.w	r2, r3, #3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 809a 	beq.w	8000ec8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b55      	ldr	r3, [pc, #340]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a54      	ldr	r2, [pc, #336]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b52      	ldr	r3, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dac:	4a50      	ldr	r2, [pc, #320]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dd6:	d013      	beq.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <HAL_GPIO_Init+0x2d4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00d      	beq.n	8000dfc <HAL_GPIO_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <HAL_GPIO_Init+0x2d8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x1d8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a44      	ldr	r2, [pc, #272]	; (8000efc <HAL_GPIO_Init+0x2dc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d101      	bne.n	8000df4 <HAL_GPIO_Init+0x1d4>
 8000df0:	2303      	movs	r3, #3
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000df4:	2305      	movs	r3, #5
 8000df6:	e004      	b.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_GPIO_Init+0x1e2>
 8000e00:	2300      	movs	r3, #0
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e12:	4937      	ldr	r1, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e20:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e44:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <HAL_GPIO_Init+0x2e0>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f47f aea9 	bne.w	8000c30 <HAL_GPIO_Init+0x10>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000c00 	.word	0x48000c00
 8000f00:	40010400 	.word	0x40010400

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f001 b823 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 817d 	beq.w	800126a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f70:	4bbc      	ldr	r3, [pc, #752]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d00c      	beq.n	8000f96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f7c:	4bb9      	ldr	r3, [pc, #740]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d15c      	bne.n	8001042 <HAL_RCC_OscConfig+0x10e>
 8000f88:	4bb6      	ldr	r3, [pc, #728]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d155      	bne.n	8001042 <HAL_RCC_OscConfig+0x10e>
 8000f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000faa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x94>
 8000fc2:	4ba8      	ldr	r3, [pc, #672]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e015      	b.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
 8000fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fe4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ff0:	4b9c      	ldr	r3, [pc, #624]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ffc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001000:	fa92 f2a2 	rbit	r2, r2
 8001004:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001008:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800100c:	fab2 f282 	clz	r2, r2
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 811f 	beq.w	8001268 <HAL_RCC_OscConfig+0x334>
 800102a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8116 	bne.w	8001268 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f000 bfaf 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x12e>
 8001054:	4b83      	ldr	r3, [pc, #524]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a82      	ldr	r2, [pc, #520]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e036      	b.n	80010d0 <HAL_RCC_OscConfig+0x19c>
 8001062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x158>
 8001072:	4b7c      	ldr	r3, [pc, #496]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7b      	ldr	r2, [pc, #492]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b79      	ldr	r3, [pc, #484]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a78      	ldr	r2, [pc, #480]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e021      	b.n	80010d0 <HAL_RCC_OscConfig+0x19c>
 800108c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x184>
 800109e:	4b71      	ldr	r3, [pc, #452]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a70      	ldr	r2, [pc, #448]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b6e      	ldr	r3, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0x19c>
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d0:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	f023 020f 	bic.w	r2, r3, #15
 80010d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	495f      	ldr	r1, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d059      	beq.n	80011ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fc7b 	bl	80009f4 <HAL_GetTick>
 80010fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e00a      	b.n	800111a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fc76 	bl	80009f4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d902      	bls.n	800111a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	f000 bf43 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 800111a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800112e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x218>
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	e015      	b.n	8001178 <HAL_RCC_OscConfig+0x244>
 800114c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001150:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001168:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001180:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800118c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	f042 0220 	orr.w	r2, r2, #32
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f002 021f 	and.w	r2, r2, #31
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ab      	beq.n	8001104 <HAL_RCC_OscConfig+0x1d0>
 80011ac:	e05d      	b.n	800126a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc21 	bl	80009f4 <HAL_GetTick>
 80011b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc1c 	bl	80009f4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d902      	bls.n	80011ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f000 bee9 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 80011ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x2cc>
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	e015      	b.n	800122c <HAL_RCC_OscConfig+0x2f8>
 8001200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001204:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001218:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800121c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_RCC_OscConfig+0x330>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001230:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001234:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001238:	fa92 f2a2 	rbit	r2, r2
 800123c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001240:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001244:	fab2 f282 	clz	r2, r2
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	f042 0220 	orr.w	r2, r2, #32
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f002 021f 	and.w	r2, r2, #31
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ab      	bne.n	80011b8 <HAL_RCC_OscConfig+0x284>
 8001260:	e003      	b.n	800126a <HAL_RCC_OscConfig+0x336>
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 817d 	beq.w	800157a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001280:	4ba6      	ldr	r3, [pc, #664]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800128c:	4ba3      	ldr	r3, [pc, #652]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d172      	bne.n	800137e <HAL_RCC_OscConfig+0x44a>
 8001298:	4ba0      	ldr	r3, [pc, #640]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d16c      	bne.n	800137e <HAL_RCC_OscConfig+0x44a>
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x3a0>
 80012ce:	4b93      	ldr	r3, [pc, #588]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	e013      	b.n	80012fc <HAL_RCC_OscConfig+0x3c8>
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012f8:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	2202      	movs	r2, #2
 80012fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001302:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001306:	fa92 f2a2 	rbit	r2, r2
 800130a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800130e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f002 021f 	and.w	r2, r2, #31
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00a      	beq.n	8001344 <HAL_RCC_OscConfig+0x410>
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f000 be2e 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b75      	ldr	r3, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	21f8      	movs	r1, #248	; 0xf8
 800135a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001362:	fa91 f1a1 	rbit	r1, r1
 8001366:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800136a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800136e:	fab1 f181 	clz	r1, r1
 8001372:	b2c9      	uxtb	r1, r1
 8001374:	408b      	lsls	r3, r1
 8001376:	4969      	ldr	r1, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137c:	e0fd      	b.n	800157a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8088 	beq.w	80014a0 <HAL_RCC_OscConfig+0x56c>
 8001390:	2301      	movs	r3, #1
 8001392:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	461a      	mov	r2, r3
 80013b8:	2301      	movs	r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb1a 	bl	80009f4 <HAL_GetTick>
 80013c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fb15 	bl	80009f4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d902      	bls.n	80013dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f000 bde2 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x4d8>
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e013      	b.n	8001434 <HAL_RCC_OscConfig+0x500>
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001424:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	2202      	movs	r2, #2
 8001436:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800143a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800143e:	fa92 f2a2 	rbit	r2, r2
 8001442:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001446:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800144a:	fab2 f282 	clz	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0af      	beq.n	80013c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	21f8      	movs	r1, #248	; 0xf8
 800147c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001484:	fa91 f1a1 	rbit	r1, r1
 8001488:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800148c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001490:	fab1 f181 	clz	r1, r1
 8001494:	b2c9      	uxtb	r1, r1
 8001496:	408b      	lsls	r3, r1
 8001498:	4920      	ldr	r1, [pc, #128]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
 800149e:	e06c      	b.n	800157a <HAL_RCC_OscConfig+0x646>
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	461a      	mov	r2, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa92 	bl	80009f4 <HAL_GetTick>
 80014d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fa8d 	bl	80009f4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d902      	bls.n	80014ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f000 bd5a 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	095b      	lsrs	r3, r3, #5
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d104      	bne.n	8001520 <HAL_RCC_OscConfig+0x5ec>
 8001516:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_RCC_OscConfig+0x5e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	e015      	b.n	8001548 <HAL_RCC_OscConfig+0x614>
 800151c:	40021000 	.word	0x40021000
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001544:	4bc8      	ldr	r3, [pc, #800]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2202      	movs	r2, #2
 800154a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800154e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800155a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ad      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8110 	beq.w	80017b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d079      	beq.n	8001694 <HAL_RCC_OscConfig+0x760>
 80015a0:	2301      	movs	r3, #1
 80015a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4bab      	ldr	r3, [pc, #684]	; (800186c <HAL_RCC_OscConfig+0x938>)
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	461a      	mov	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fa13 	bl	80009f4 <HAL_GetTick>
 80015ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fa0e 	bl	80009f4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d902      	bls.n	80015ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f000 bcdb 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001604:	2202      	movs	r2, #2
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	fa93 f2a3 	rbit	r2, r3
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001644:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001650:	2102      	movs	r1, #2
 8001652:	6019      	str	r1, [r3, #0]
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f1a3 	rbit	r1, r3
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800166a:	6019      	str	r1, [r3, #0]
  return result;
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0a0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x6a0>
 8001692:	e08d      	b.n	80017b0 <HAL_RCC_OscConfig+0x87c>
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016b6:	601a      	str	r2, [r3, #0]
  return result;
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x938>)
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	461a      	mov	r2, r3
 80016d2:	2300      	movs	r3, #0
 80016d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f98d 	bl	80009f4 <HAL_GetTick>
 80016da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff f988 	bl	80009f4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d902      	bls.n	80016f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f000 bc55 	b.w	8001fa0 <HAL_RCC_OscConfig+0x106c>
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016fe:	2202      	movs	r2, #2
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f2a3 	rbit	r2, r3
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001722:	2202      	movs	r2, #2
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f2a3 	rbit	r2, r3
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001746:	2202      	movs	r2, #2
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001760:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 8001764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800176e:	2102      	movs	r1, #2
 8001770:	6019      	str	r1, [r3, #0]
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f1a3 	rbit	r1, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001788:	6019      	str	r1, [r3, #0]
  return result;
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d197      	bne.n	80016e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 81a1 	beq.w	8001b08 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d116      	bne.n	8001806 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	61d3      	str	r3, [r2, #28]
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80017fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x93c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11a      	bne.n	8001848 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x93c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_RCC_OscConfig+0x93c>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff f8e9 	bl	80009f4 <HAL_GetTick>
 8001822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	e009      	b.n	800183c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001828:	f7ff f8e4 	bl	80009f4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e3b1      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x93c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10d      	bne.n	8001874 <HAL_RCC_OscConfig+0x940>
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a02      	ldr	r2, [pc, #8]	; (8001868 <HAL_RCC_OscConfig+0x934>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e03c      	b.n	80018e0 <HAL_RCC_OscConfig+0x9ac>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	10908120 	.word	0x10908120
 8001870:	40007000 	.word	0x40007000
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x96a>
 8001884:	4bc1      	ldr	r3, [pc, #772]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4ac0      	ldr	r2, [pc, #768]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	4bbe      	ldr	r3, [pc, #760]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4abd      	ldr	r2, [pc, #756]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	e020      	b.n	80018e0 <HAL_RCC_OscConfig+0x9ac>
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x994>
 80018ae:	4bb7      	ldr	r3, [pc, #732]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4ab6      	ldr	r2, [pc, #728]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4bb4      	ldr	r3, [pc, #720]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4ab3      	ldr	r2, [pc, #716]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x9ac>
 80018c8:	4bb0      	ldr	r3, [pc, #704]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4aaf      	ldr	r2, [pc, #700]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	4bad      	ldr	r3, [pc, #692]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4aac      	ldr	r2, [pc, #688]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80018da:	f023 0304 	bic.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8081 	beq.w	80019f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f87f 	bl	80009f4 <HAL_GetTick>
 80018f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff f87a 	bl	80009f4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e345      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001940:	2202      	movs	r2, #2
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800195a:	601a      	str	r2, [r3, #0]
  return result;
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001964:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d102      	bne.n	8001980 <HAL_RCC_OscConfig+0xa4c>
 800197a:	4b84      	ldr	r3, [pc, #528]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	e013      	b.n	80019a8 <HAL_RCC_OscConfig+0xa74>
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019b0:	2102      	movs	r1, #2
 80019b2:	6011      	str	r1, [r2, #0]
 80019b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	fa92 f1a2 	rbit	r1, r2
 80019c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019ca:	6011      	str	r1, [r2, #0]
  return result;
 80019cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d084      	beq.n	80018fc <HAL_RCC_OscConfig+0x9c8>
 80019f2:	e07f      	b.n	8001af4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7fe fffe 	bl	80009f4 <HAL_GetTick>
 80019f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7fe fff9 	bl	80009f4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2c4      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a1e:	2202      	movs	r2, #2
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0xb4e>
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	e013      	b.n	8001aaa <HAL_RCC_OscConfig+0xb76>
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fa92 f1a2 	rbit	r1, r2
 8001ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001acc:	6011      	str	r1, [r2, #0]
  return result;
 8001ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d184      	bne.n	80019fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001af4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8242 	beq.w	8001f9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_OscConfig+0xc58>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	f000 8213 	beq.w	8001f4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f040 8162 	bne.w	8001dfe <HAL_RCC_OscConfig+0xeca>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe ff38 	bl	80009f4 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e00c      	b.n	8001ba4 <HAL_RCC_OscConfig+0xc70>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe ff30 	bl	80009f4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1fd      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bc8:	601a      	str	r2, [r3, #0]
  return result;
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0xcba>
 8001be8:	4bb0      	ldr	r3, [pc, #704]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e027      	b.n	8001c3e <HAL_RCC_OscConfig+0xd0a>
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	4b9c      	ldr	r3, [pc, #624]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c4a:	6011      	str	r1, [r2, #0]
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	fa92 f1a2 	rbit	r1, r2
 8001c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c62:	6011      	str	r1, [r2, #0]
  return result;
 8001c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	fab2 f282 	clz	r2, r2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f002 021f 	and.w	r2, r2, #31
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d182      	bne.n	8001b90 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	497f      	ldr	r1, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ce0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fe7c 	bl	80009f4 <HAL_GetTick>
 8001cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	e009      	b.n	8001d16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7fe fe77 	bl	80009f4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e144      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d3a:	601a      	str	r2, [r3, #0]
  return result;
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0xe2c>
 8001d5a:	4b54      	ldr	r3, [pc, #336]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e027      	b.n	8001db0 <HAL_RCC_OscConfig+0xe7c>
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f2a3 	rbit	r2, r3
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fa92 f1a2 	rbit	r1, r2
 8001dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dd4:	6011      	str	r1, [r2, #0]
  return result;
 8001dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d082      	beq.n	8001d02 <HAL_RCC_OscConfig+0xdce>
 8001dfc:	e0cf      	b.n	8001f9e <HAL_RCC_OscConfig+0x106a>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fdd6 	bl	80009f4 <HAL_GetTick>
 8001e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fdd1 	bl	80009f4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e09e      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e86:	601a      	str	r2, [r3, #0]
  return result;
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xf7c>
 8001ea6:	4b01      	ldr	r3, [pc, #4]	; (8001eac <HAL_RCC_OscConfig+0xf78>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e029      	b.n	8001f00 <HAL_RCC_OscConfig+0xfcc>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_OscConfig+0x1078>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	fa92 f1a2 	rbit	r1, r2
 8001f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f24:	6011      	str	r1, [r2, #0]
  return result;
 8001f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	fab2 f282 	clz	r2, r2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f042 0220 	orr.w	r2, r2, #32
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f002 021f 	and.w	r2, r2, #31
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d180      	bne.n	8001e4e <HAL_RCC_OscConfig+0xf1a>
 8001f4c:	e027      	b.n	8001f9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01e      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_OscConfig+0x1078>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09e      	sub	sp, #120	; 0x78
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e162      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b90      	ldr	r3, [pc, #576]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b8d      	ldr	r3, [pc, #564]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	498b      	ldr	r1, [pc, #556]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b89      	ldr	r3, [pc, #548]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e14a      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	497f      	ldr	r1, [pc, #508]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80dc 	beq.w	80021dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d13c      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xf6>
 800202c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002030:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800203a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_RCC_ClockConfig+0xa6>
 8002050:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e00f      	b.n	8002076 <HAL_RCC_ClockConfig+0xc6>
 8002056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800205a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	667b      	str	r3, [r7, #100]	; 0x64
 8002064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002068:	663b      	str	r3, [r7, #96]	; 0x60
 800206a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800207a:	65ba      	str	r2, [r7, #88]	; 0x58
 800207c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d17b      	bne.n	800219a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0f3      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d13c      	bne.n	8002128 <HAL_RCC_ClockConfig+0x178>
 80020ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x128>
 80020d2:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_ClockConfig+0x148>
 80020d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
 80020ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80020fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f002 021f 	and.w	r2, r2, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13a      	bne.n	800219a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b2      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_ClockConfig+0x1a0>
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e00d      	b.n	800216c <HAL_RCC_ClockConfig+0x1bc>
 8002150:	2302      	movs	r3, #2
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2202      	movs	r2, #2
 800216e:	61ba      	str	r2, [r7, #24]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	fa92 f2a2 	rbit	r2, r2
 8002176:	617a      	str	r2, [r7, #20]
  return result;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0220 	orr.w	r2, r2, #32
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e079      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	491a      	ldr	r1, [pc, #104]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fc22 	bl	80009f4 <HAL_GetTick>
 80021b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7fe fc1e 	bl	80009f4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e061      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d214      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4906      	ldr	r1, [pc, #24]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e040      	b.n	800228e <HAL_RCC_ClockConfig+0x2de>
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_ClockConfig+0x2e8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	491a      	ldr	r1, [pc, #104]	; (8002298 <HAL_RCC_ClockConfig+0x2e8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_RCC_ClockConfig+0x2e8>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4912      	ldr	r1, [pc, #72]	; (8002298 <HAL_RCC_ClockConfig+0x2e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002252:	f000 f829 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002256:	4601      	mov	r1, r0
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <HAL_RCC_ClockConfig+0x2e8>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	22f0      	movs	r2, #240	; 0xf0
 8002262:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	fa92 f2a2 	rbit	r2, r2
 800226a:	60fa      	str	r2, [r7, #12]
  return result;
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	fab2 f282 	clz	r2, r2
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	40d3      	lsrs	r3, r2
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x2ec>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	fa21 f303 	lsr.w	r3, r1, r3
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fb70 	bl	800096c <HAL_InitTick>
  
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3778      	adds	r7, #120	; 0x78
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	080038f0 	.word	0x080038f0
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004

080022a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b08b      	sub	sp, #44	; 0x2c
 80022ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d002      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d003      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x36>
 80022d6:	e03c      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022da:	623b      	str	r3, [r7, #32]
      break;
 80022dc:	e03c      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	607a      	str	r2, [r7, #4]
  return result;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	40d3      	lsrs	r3, r2
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	220f      	movs	r2, #15
 800230c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	60fa      	str	r2, [r7, #12]
  return result;
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	40d3      	lsrs	r3, r2
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	fbb2 f2f3 	udiv	r2, r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	e004      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	623b      	str	r3, [r7, #32]
      break;
 8002350:	e002      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002354:	623b      	str	r3, [r7, #32]
      break;
 8002356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002358:	6a3b      	ldr	r3, [r7, #32]
}
 800235a:	4618      	mov	r0, r3
 800235c:	372c      	adds	r7, #44	; 0x2c
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	007a1200 	.word	0x007a1200
 8002370:	08003908 	.word	0x08003908
 8002374:	08003918 	.word	0x08003918
 8002378:	003d0900 	.word	0x003d0900

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800239a:	f7ff ffef 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239e:	4601      	mov	r1, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	603a      	str	r2, [r7, #0]
  return result;
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	40d3      	lsrs	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08003900 	.word	0x08003900

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023de:	f7ff ffcd 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	603a      	str	r2, [r7, #0]
  return result;
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	40d3      	lsrs	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08003900 	.word	0x08003900

0800241c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e09d      	b.n	800256a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243e:	d009      	beq.n	8002454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
 8002446:	e005      	b.n	8002454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f95c 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002494:	d902      	bls.n	800249c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e002      	b.n	80024a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024aa:	d007      	beq.n	80024bc <HAL_SPI_Init+0xa0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	f003 0204 	and.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002538:	ea42 0103 	orr.w	r1, r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002558:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b08a      	sub	sp, #40	; 0x28
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002580:	2301      	movs	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x26>
 8002594:	2302      	movs	r3, #2
 8002596:	e1fb      	b.n	8002990 <HAL_SPI_TransmitReceive+0x41e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025a0:	f7fe fa28 	bl	80009f4 <HAL_GetTick>
 80025a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025bc:	7efb      	ldrb	r3, [r7, #27]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d00e      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x6e>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c8:	d106      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x66>
 80025d2:	7efb      	ldrb	r3, [r7, #27]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d003      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80025de:	e1cd      	b.n	800297c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_SPI_TransmitReceive+0x80>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_SPI_TransmitReceive+0x80>
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80025f8:	e1c0      	b.n	800297c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2205      	movs	r2, #5
 800260a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002650:	d802      	bhi.n	8002658 <HAL_SPI_TransmitReceive+0xe6>
 8002652:	8a3b      	ldrh	r3, [r7, #16]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d908      	bls.n	800266a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	e007      	b.n	800267a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002678:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d007      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026a0:	d97c      	bls.n	800279c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x13e>
 80026aa:	8a7b      	ldrh	r3, [r7, #18]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d169      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d4:	e056      	b.n	8002784 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11b      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1aa>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_SPI_TransmitReceive+0x1aa>
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d113      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d11c      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x1f2>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	b292      	uxth	r2, r2
 8002742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002760:	2301      	movs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002764:	f7fe f946 	bl	80009f4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002770:	429a      	cmp	r2, r3
 8002772:	d807      	bhi.n	8002784 <HAL_SPI_TransmitReceive+0x212>
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d003      	beq.n	8002784 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002782:	e0fb      	b.n	800297c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1a3      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x164>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d19d      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x164>
 800279a:	e0df      	b.n	800295c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x23a>
 80027a4:	8a7b      	ldrh	r3, [r7, #18]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	f040 80cb 	bne.w	8002942 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d912      	bls.n	80027dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	1c9a      	adds	r2, r3, #2
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b02      	subs	r3, #2
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027da:	e0b2      	b.n	8002942 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002802:	e09e      	b.n	8002942 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d134      	bne.n	800287c <HAL_SPI_TransmitReceive+0x30a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02f      	beq.n	800287c <HAL_SPI_TransmitReceive+0x30a>
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2b01      	cmp	r3, #1
 8002820:	d12c      	bne.n	800287c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d912      	bls.n	8002852 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c9a      	adds	r2, r3, #2
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b02      	subs	r3, #2
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002850:	e012      	b.n	8002878 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d148      	bne.n	800291c <HAL_SPI_TransmitReceive+0x3aa>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d042      	beq.n	800291c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d923      	bls.n	80028ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	b292      	uxth	r2, r2
 80028ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b02      	subs	r3, #2
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d81f      	bhi.n	8002918 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	e016      	b.n	8002918 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f103 020c 	add.w	r2, r3, #12
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800291c:	f7fe f86a 	bl	80009f4 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002928:	429a      	cmp	r2, r3
 800292a:	d803      	bhi.n	8002934 <HAL_SPI_TransmitReceive+0x3c2>
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d102      	bne.n	800293a <HAL_SPI_TransmitReceive+0x3c8>
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002940:	e01c      	b.n	800297c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f af5b 	bne.w	8002804 <HAL_SPI_TransmitReceive+0x292>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f af54 	bne.w	8002804 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f937 	bl	8002bd4 <SPI_EndRxTxTransaction>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	661a      	str	r2, [r3, #96]	; 0x60
 8002978:	e000      	b.n	800297c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800297a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800298c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a8:	f7fe f824 	bl	80009f4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b8:	f7fe f81c 	bl	80009f4 <HAL_GetTick>
 80029bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	015b      	lsls	r3, r3, #5
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ce:	e054      	b.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d050      	beq.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d8:	f7fe f80c 	bl	80009f4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d902      	bls.n	80029ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d13d      	bne.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d111      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a10:	d004      	beq.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d107      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a34:	d10f      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e017      	b.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d19b      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000000 	.word	0x20000000

08002aa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002aba:	f7fd ff9b 	bl	80009f4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002aca:	f7fd ff93 	bl	80009f4 <HAL_GetTick>
 8002ace:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00da      	lsls	r2, r3, #3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	0d1b      	lsrs	r3, r3, #20
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002af0:	e060      	b.n	8002bb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002af8:	d107      	bne.n	8002b0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d050      	beq.n	8002bb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b12:	f7fd ff6f 	bl	80009f4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d902      	bls.n	8002b28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d13d      	bne.n	8002ba4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b40:	d111      	bne.n	8002b66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4a:	d004      	beq.n	8002b56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d107      	bne.n	8002b66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6e:	d10f      	bne.n	8002b90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e010      	b.n	8002bc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d196      	bne.n	8002af2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff5b 	bl	8002aa8 <SPI_WaitFifoStateUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e027      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fec0 	bl	8002998 <SPI_WaitFlagStateUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e014      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ff34 	bl	8002aa8 <SPI_WaitFifoStateUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e000      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e049      	b.n	8002d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd fd94 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 f94c 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e033      	b.n	8002d90 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_TIM_Base_Start+0x8c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_Base_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_Base_Start+0x3e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <HAL_TIM_Base_Start+0x90>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d115      	bne.n	8002d7a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_TIM_Base_Start+0x94>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d015      	beq.n	8002d8c <HAL_TIM_Base_Start+0x7c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d011      	beq.n	8002d8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	e008      	b.n	8002d8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	00010007 	.word	0x00010007

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0b6      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x18a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e00:	d03e      	beq.n	8002e80 <HAL_TIM_ConfigClockSource+0xd8>
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	f200 8087 	bhi.w	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	f000 8086 	beq.w	8002f1e <HAL_TIM_ConfigClockSource+0x176>
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	d87f      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d01a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0xaa>
 8002e1c:	2b70      	cmp	r3, #112	; 0x70
 8002e1e:	d87b      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e20:	2b60      	cmp	r3, #96	; 0x60
 8002e22:	d050      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x11e>
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d877      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0xfe>
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d873      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d058      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0x13e>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d86f      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d064      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15e>
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d86b      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d060      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15e>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d867      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15e>
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d05a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0x15e>
 8002e50:	e062      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f000 f953 	bl	800310c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
      break;
 8002e7e:	e04f      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f000 f93c 	bl	800310c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea2:	609a      	str	r2, [r3, #8]
      break;
 8002ea4:	e03c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 f8b0 	bl	8003018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2150      	movs	r1, #80	; 0x50
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f909 	bl	80030d6 <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e02c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f000 f8cf 	bl	8003076 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2160      	movs	r1, #96	; 0x60
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f8f9 	bl	80030d6 <TIM_ITRx_SetConfig>
      break;
 8002ee4:	e01c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f000 f890 	bl	8003018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8e9 	bl	80030d6 <TIM_ITRx_SetConfig>
      break;
 8002f04:	e00c      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f000 f8e0 	bl	80030d6 <TIM_ITRx_SetConfig>
      break;
 8002f16:	e003      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <TIM_Base_SetConfig+0xcc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x20>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0xcc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x5a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x5a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <TIM_Base_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x5a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <TIM_Base_SetConfig+0xd4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x5a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <TIM_Base_SetConfig+0xd8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <TIM_Base_SetConfig+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0xb0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	; (800300c <TIM_Base_SetConfig+0xd0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0xb0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <TIM_Base_SetConfig+0xd4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0xb0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <TIM_Base_SetConfig+0xd8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800

08003018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 030a 	bic.w	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0210 	bic.w	r2, r3, #16
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	031b      	lsls	r3, r3, #12
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f043 0307 	orr.w	r3, r3, #7
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	431a      	orrs	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003160:	2302      	movs	r3, #2
 8003162:	e04f      	b.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a21      	ldr	r2, [pc, #132]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003194:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a14      	ldr	r2, [pc, #80]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031cc:	d004      	beq.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10c      	bne.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014000 	.word	0x40014000

08003218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e040      	b.n	80032ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fad8 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f82c 	bl	80032b4 <UART_SetConfig>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f956 	bl	8003520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f9dd 	bl	8003664 <UART_CheckIdleState>
 80032aa:	4603      	mov	r3, r0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <UART_SetConfig+0x254>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	6979      	ldr	r1, [r7, #20]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a78      	ldr	r2, [pc, #480]	; (800350c <UART_SetConfig+0x258>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d120      	bne.n	8003372 <UART_SetConfig+0xbe>
 8003330:	4b77      	ldr	r3, [pc, #476]	; (8003510 <UART_SetConfig+0x25c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d817      	bhi.n	800336c <UART_SetConfig+0xb8>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x90>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003355 	.word	0x08003355
 8003348:	08003361 	.word	0x08003361
 800334c:	08003367 	.word	0x08003367
 8003350:	0800335b 	.word	0x0800335b
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e01d      	b.n	8003396 <UART_SetConfig+0xe2>
 800335a:	2302      	movs	r3, #2
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e01a      	b.n	8003396 <UART_SetConfig+0xe2>
 8003360:	2304      	movs	r3, #4
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e017      	b.n	8003396 <UART_SetConfig+0xe2>
 8003366:	2308      	movs	r3, #8
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e014      	b.n	8003396 <UART_SetConfig+0xe2>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e011      	b.n	8003396 <UART_SetConfig+0xe2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a67      	ldr	r2, [pc, #412]	; (8003514 <UART_SetConfig+0x260>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d102      	bne.n	8003382 <UART_SetConfig+0xce>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0xe2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a64      	ldr	r2, [pc, #400]	; (8003518 <UART_SetConfig+0x264>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <UART_SetConfig+0xde>
 800338c:	2300      	movs	r3, #0
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e001      	b.n	8003396 <UART_SetConfig+0xe2>
 8003392:	2310      	movs	r3, #16
 8003394:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339e:	d15b      	bne.n	8003458 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d827      	bhi.n	80033f6 <UART_SetConfig+0x142>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0xf8>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe ffe0 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80033d4:	61b8      	str	r0, [r7, #24]
        break;
 80033d6:	e013      	b.n	8003400 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fffe 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 80033dc:	61b8      	str	r0, [r7, #24]
        break;
 80033de:	e00f      	b.n	8003400 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <UART_SetConfig+0x268>)
 80033e2:	61bb      	str	r3, [r7, #24]
        break;
 80033e4:	e00c      	b.n	8003400 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe ff5f 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80033ea:	61b8      	str	r0, [r7, #24]
        break;
 80033ec:	e008      	b.n	8003400 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e004      	b.n	8003400 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77bb      	strb	r3, [r7, #30]
        break;
 80033fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d074      	beq.n	80034f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	005a      	lsls	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d916      	bls.n	8003452 <UART_SetConfig+0x19e>
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d212      	bcs.n	8003452 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	b29b      	uxth	r3, r3
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	b29a      	uxth	r2, r3
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	4313      	orrs	r3, r2
 8003446:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	89fa      	ldrh	r2, [r7, #14]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e04e      	b.n	80034f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77bb      	strb	r3, [r7, #30]
 8003456:	e04b      	b.n	80034f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d827      	bhi.n	80034ae <UART_SetConfig+0x1fa>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x1b0>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7fe ff84 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e013      	b.n	80034b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7fe ffa2 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b20      	ldr	r3, [pc, #128]	; (800351c <UART_SetConfig+0x268>)
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe ff03 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80034a2:	61b8      	str	r0, [r7, #24]
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77bb      	strb	r3, [r7, #30]
        break;
 80034b6:	bf00      	nop
    }

    if (pclk != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	085a      	lsrs	r2, r3, #1
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	d908      	bls.n	80034ec <UART_SetConfig+0x238>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d204      	bcs.n	80034ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	e001      	b.n	80034f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	efff69f3 	.word	0xefff69f3
 800350c:	40013800 	.word	0x40013800
 8003510:	40021000 	.word	0x40021000
 8003514:	40004400 	.word	0x40004400
 8003518:	40004800 	.word	0x40004800
 800351c:	007a1200 	.word	0x007a1200

08003520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01a      	beq.n	8003636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d10a      	bne.n	8003636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003674:	f7fd f9be 	bl	80009f4 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d10e      	bne.n	80036a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f82d 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e023      	b.n	80036ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d10e      	bne.n	80036d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f817 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e00d      	b.n	80036ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b09c      	sub	sp, #112	; 0x70
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	e0a5      	b.n	8003854 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	f000 80a1 	beq.w	8003854 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fd f96f 	bl	80009f4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <UART_WaitOnFlagUntilTimeout+0x32>
 8003722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003724:	2b00      	cmp	r3, #0
 8003726:	d13e      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800373c:	667b      	str	r3, [r7, #100]	; 0x64
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003748:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800374c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e6      	bne.n	8003728 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3308      	adds	r3, #8
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	663b      	str	r3, [r7, #96]	; 0x60
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3308      	adds	r3, #8
 8003778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800377a:	64ba      	str	r2, [r7, #72]	; 0x48
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e067      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d04f      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d147      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
 80037ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e6      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	613b      	str	r3, [r7, #16]
   return(result);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	66bb      	str	r3, [r7, #104]	; 0x68
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3308      	adds	r3, #8
 800381e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003820:	623a      	str	r2, [r7, #32]
 8003822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	61bb      	str	r3, [r7, #24]
   return(result);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e010      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	f43f af4a 	beq.w	8003708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3770      	adds	r7, #112	; 0x70
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4d0d      	ldr	r5, [pc, #52]	; (80038b8 <__libc_init_array+0x38>)
 8003884:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	2600      	movs	r6, #0
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	4d0b      	ldr	r5, [pc, #44]	; (80038c0 <__libc_init_array+0x40>)
 8003892:	4c0c      	ldr	r4, [pc, #48]	; (80038c4 <__libc_init_array+0x44>)
 8003894:	f000 f820 	bl	80038d8 <_init>
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	2600      	movs	r6, #0
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	08003928 	.word	0x08003928
 80038bc:	08003928 	.word	0x08003928
 80038c0:	08003928 	.word	0x08003928
 80038c4:	0800392c 	.word	0x0800392c

080038c8 <memset>:
 80038c8:	4402      	add	r2, r0
 80038ca:	4603      	mov	r3, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <_init>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	bf00      	nop
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr

080038e4 <_fini>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr
